{"version":3,"sources":["stores/UserStore.js","InputField.js","SubmitButton.js","LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","InputField","className","type","props","placeholder","value","onChange","e","target","React","Component","SubmitButton","disabled","onClick","text","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","msg","console","log","setInputValue","doLogin","App","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.54018b8e.chunk.js","sourcesContent":["import { extendObservable } from 'mobx';\r\n\r\n\r\nclass UserStore{\r\n    constructor(){\r\n        extendObservable(this,{\r\n            loading:true,\r\n            isLoggedIn:false,\r\n            username:''\r\n        })\r\n    }\r\n}\r\nexport default new UserStore();","import React from 'react';\r\n\r\nclass InputField extends React.Component {\r\n    render(){\r\n      return (\r\n        <div className=\"inputField\">\r\n            \r\n            <input className='input'\r\n                   type={this.props.type}\r\n                   placeholder={this.props.placeholder}\r\n                   value={this.props.value}\r\n                   onChange={ (e) =>this.props.onChange(e.target.value) }\r\n           />\r\n\r\n        </div>\r\n      );\r\n  }\r\n}\r\nexport default InputField;","import React from 'react';\r\n\r\nclass SubmitButton extends React.Component {\r\n    render(){\r\n      return (\r\n        <div className='submitButton'>\r\n            <button className='btn'\r\n                    disabled={this.props.disabled}\r\n                    onClick={ () =>this.props.onClick() }\r\n            >\r\n                {this.props.text}\r\n              </button>\r\n        </div>\r\n      );\r\n  }\r\n}\r\nexport default SubmitButton;\r\n","import React from 'react';\r\nimport InputField from './InputField';\r\nimport SubmitButton from './SubmitButton';\r\nimport UserStore from './stores/UserStore';\r\n\r\nclass LoginForm extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state={\r\n        username:'',\r\n        password:'',\r\n        buttonDisabled:false\r\n      }\r\n    }\r\n\r\n    setInputValue(property,val){\r\n      val=val.trim();\r\n      if(val.length >12){\r\n        return;\r\n      }\r\n      this.setState({\r\n        [property]:val\r\n      })\r\n    }\r\n    resetForm(){\r\n      this.setState({\r\n        username:'',\r\n        password:'',\r\n        buttonDisabled:false\r\n      })\r\n    }\r\n    async doLogin(){\r\n      \r\n      if(this.state.username){\r\n        return;\r\n      }\r\n      if(this.state.password){\r\n        return;\r\n      }\r\n      this.setState({\r\n        buttonDisabled:true\r\n      })\r\n\r\n      try{\r\n\r\n        let res= await fetch('/login',{\r\n          method:'post',\r\n          headers:{\r\n              'Accept':'application/json',\r\n              'Content-Type':'application/json'\r\n          },\r\n          body:JSON.stringify({\r\n            username:this.state.username,\r\n            password:this.state.password\r\n          })\r\n        });\r\n        let result=await res.json();\r\n        if(result && result.success){\r\n          UserStore.isLoggedIn=true;\r\n          UserStore.username=result.username;\r\n        }\r\n        else if(result && result.success=== false){\r\n          this.resetForm();\r\n          alert(result.msg);\r\n        }\r\n      }\r\n      catch(e){\r\n        console.log('doLogin -->'+e)\r\n        this.resetForm();\r\n      }\r\n    }\r\n  render(){\r\n      return (\r\n        <div className=\"loginForm\">\r\n            Login Form\r\n            <InputField \r\n                type='text'\r\n                placeholder='Username'\r\n                value={ this.state.username ? this.state.username : ''}\r\n                onChange={ (val) => this.setInputValue('username',val) }\r\n            />\r\n             <InputField \r\n                type='password'\r\n                placeholder='Password'\r\n                value={ this.state.password ? this.state.password : ''}\r\n                onChange={ (val) => this.setInputValue('password',val) }\r\n            />\r\n            <SubmitButton\r\n              text='Login'\r\n              disabled={this.state.buttonDisabled}\r\n              onClick={ () => this.doLogin() }\r\n            />\r\n        </div>\r\n      );\r\n  }\r\n}\r\nexport default LoginForm;\r\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport UserStore from './stores/UserStore';\nimport LoginForm from './LoginForm';\nimport SubmitButton from './SubmitButton';\n\nimport './App.css';\n\nclass App extends React.Component {\n// componentDidMount -- When App component Loads it checks whether the user is loggedIn\n  async componentDidMount(){\n    try{\n      let res=await fetch('/isLoggedIn',{\n        method:'post',\n        headers:{\n          'Accept':'application/json',\n          'Content-Type':'application/json'\n        }\n      });\n      let result=await res.json();\n      if (result && result.success){\n        UserStore.loading=false;\n        UserStore.isLoggedIn=true;\n        UserStore.username=result.username;   \n      }\n      else{\n        UserStore.loading=false;\n        UserStore.isLoggedIn=false;\n      }\n    }\n    catch(e){\n      console.log('componentDidMount-->'+e)\n      UserStore.loading=false;\n      UserStore.isLoggedIn=false;\n    }\n  }\n\n  //For Logout\n  async doLogout(){\n    try{\n      let res=await fetch('/logut',{\n        method:'post',\n        headers:{\n          'Accept':'application/json',\n          'Content-Type':'application/json'\n        }\n      });\n      let result=await res.json();\n      if (result && result.success){\n        UserStore.isLoggedIn=false;\n        UserStore.username='';\n      }\n    }\n    catch(e){\n      console.log('doLogut -->'+e)\n    }\n  }\n\n  render() {\n    if(UserStore.loading){\n      return <div className=\"app\">\n        <div className=\"container\">\n          Loading, Please Wait !!!\n          </div>\n      </div>;\n    }\n    else{\n      if(UserStore.isLoggedIn){\n        return <div className=\"app\">\n        <div className=\"container\">\n         Welcome {UserStore.username}\n         <SubmitButton text={'Logout'}\n                        disabled={false}\n                        onClick={ ()=>this.doLogout()}\n          />\n          </div>\n      </div>;\n      }\n    }\n\n    return (<div className=\"app\">\n        <div className=\"container\">\n            <LoginForm/>\n        </div>\n      </div>\n      );\n  }\n}\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}